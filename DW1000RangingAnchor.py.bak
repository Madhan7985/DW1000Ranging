"""
It requires the following modules: DW1000, DW1000Constants and monotonic.
"""


import DW1000
import monotonic
import DW1000Constants as C


lastActivity = 0
expectedMsgId = C.POLL
protocolFailed = False
sentAck = False
receivedAck = False
LEN_DATA = 20 
data = [0] * LEN_DATA
timePollAckSentTS = 0
timePollAckReceivedTS = 0
timePollReceivedTS = 0
timeRangeReceivedTS = 0
timePollSentTS = 0
timeRangeSentTS = 0
timeComputedRangeTS = 0
REPLY_DELAY_TIME_US = 7000 
anchorID = 2
tagID = 0

def millis():
    """
    This function returns the value (in milliseconds) of a clock which never goes backwards. It detects the inactivity of the chip and
    is used to avoid having the chip stuck in an undesirable state.
    """    
    return int(round(monotonic.monotonic() * C.MILLISECONDS))


def handleSent():
    """
    This is a callback called from the module's interrupt handler when a transmission was successful. 
    It sets the sentAck variable as True so the loop can continue.
    """            
    global sentAck
    sentAck = True


def handleReceived():
    """
    This is a callback called from the module's interrupt handler when a reception was successful. 
    It sets the received receivedAck as True so the loop can continue.
    """       
    global receivedAck
    receivedAck = True


def noteActivity():
    """
    This function records the time of the last activity so we can know if the device is inactive or not.
    """        
    global lastActivity
    lastActivity = millis()


def resetInactive():
    """
    This function restarts the default polling operation when the device is deemed inactive.
    """    
    global expectedMsgId
    print("reset inactive")    
    expectedMsgId = C.POLL
    receiver()
    noteActivity()


def transmitPollAck():
    """
    This function sends the polling acknowledge message which is used to confirm the reception of the polling message. 
    """        
    global data
    DW1000.newTransmit()
    data[0] = C.POLL_ACK
    data[17] = anchorID #data[17] is tag Id data[18] is anchor Id
    data[18] = tagID #data[17] is tag Id data[18] is anchor Id
    DW1000.setDelay(REPLY_DELAY_TIME_US, C.MICROSECONDS)
    DW1000.setData(data, LEN_DATA)
    DW1000.startTransmit()


def transmitRangeAcknowledge():
    """
    This functions sends the range acknowledge message which tells the tag that the ranging function was successful and another ranging transmission can begin.
    """
    global data
    DW1000.newTransmit()
    data[0] = C.RANGE_REPORT
    data[17] = anchorID #data[17] is tag Id data[18] is anchor Id
    data[18] = tagID #data[17] is tag Id data[18] is anchor Id
    DW1000.setData(data, LEN_DATA)
    DW1000.startTransmit()


def transmitRangeFailed():
    """
    This functions sends the range failed message which tells the tag that the ranging function has failed and to start another ranging transmission.
    """    
    global data
    DW1000.newTransmit()
    data[0] = C.RANGE_FAILED
    data[17] = anchorID #data[17] is tag Id data[18] is anchor Id
    data[18] = tagID #data[17] is tag Id data[18] is anchor Id
    DW1000.setData(data, LEN_DATA)
    DW1000.startTransmit()


def receiver():
    """
    This function configures the chip to prepare for a message reception.
    """    
    global data
    DW1000.newReceive()
    DW1000.receivePermanently()
    DW1000.startReceive()


def computeRangeAsymmetric():
    """
    This is the function which calculates the timestamp used to determine the range between the devices.
    """
    global timeComputedRangeTS, timePollSentTS
    round1 = DW1000.wrapTimestamp(timePollAckReceivedTS - timePollSentTS)
    reply1 = DW1000.wrapTimestamp(timePollAckSentTS - timePollReceivedTS)
    round2 = DW1000.wrapTimestamp(timeRangeReceivedTS - timePollAckSentTS)
    reply2 = DW1000.wrapTimestamp(timeRangeSentTS - timePollAckReceivedTS)
#    print timePollAckReceivedTS
#    print timePollSentTS
#    print timePollAckSentTS
#    print timePollReceivedTS
#    print timeRangeSentTS
#    print timeRangeReceivedTS
    timeComputedRangeTS = (round1 * round2 - reply1 * reply2) / (round1 + round2 + reply1 + reply2)


def loop(currentTag, start_timer):
    global sentAck, receivedAck, timePollAckSentTS, timePollReceivedTS, timePollSentTS, timePollAckReceivedTS, timeRangeReceivedTS, protocolFailed, data, expectedMsgId, timeRangeSentTS, anchorID, tagID

    if ((millis() - start_timer) > 500):
        print "Poll timeout for Tag"
        return True
    tagID = currentTag
    if(sentAck == False and receivedAck == False):
        if ((millis() - lastActivity) > C.RESET_PERIOD):
            resetInactive()
        return False 
 
    if sentAck :
        print "inside sent ACK"
        sentAck = False
#        if(DW1000.getData(LEN_DATA)[17] == currentTag):
        msgId = data[0]
        if msgId == C.POLL_ACK:
            timePollAckSentTS = DW1000.getTransmitTimestamp()
            noteActivity()
 
    if receivedAck: 
    
        receivedAck = False
        if (DW1000.getData(LEN_DATA)[18] == anchorID) and (DW1000.getData(LEN_DATA)[17] == currentTag):
            data = DW1000.getData(LEN_DATA)
            print data
            msgId = data[0]
            if data[17] < 20 or data[18] != anchorID:
                noteActivity()
                return False
#            print data[17], data[18]
            if msgId != expectedMsgId:
                protocolFailed = True
#                print "Expected msgid: {}, actual {}, sender {}".format(expectedMsgId, msgId, data[17])
#                return True
            if msgId == C.POLL:
                protocolFailed = False
#                print "Full data", data 
                timePollReceivedTS = DW1000.getReceiveTimestamp()
                expectedMsgId = C.RANGE
                transmitPollAck()
                noteActivity()
            elif msgId == C.RANGE:
                timeRangeReceivedTS = DW1000.getReceiveTimestamp()
                expectedMsgId = C.POLL
                if protocolFailed == False:
                    timePollSentTS = DW1000.getTimeStamp(data, 1)
#                    print "time in loop", timePollSentTS
                    timePollAckReceivedTS = DW1000.getTimeStamp(data, 6)
                    timeRangeSentTS = DW1000.getTimeStamp(data, 11)
                    computeRangeAsymmetric()
                    transmitRangeAcknowledge()
                    sentAck = True
                    distance = (timeComputedRangeTS % C.TIME_OVERFLOW) * C.DISTANCE_OF_RADIO
                    print("Distance: %.2f m from tagID %d" %(distance, currentTag))
                    noteActivity()
                    return True
                else:
                    transmitRangeFailed()
     
                noteActivity()
        noteActivity()
        return False



try:    
    PIN_IRQ = 19
    PIN_SS = 16
    DW1000.begin(PIN_IRQ)
    DW1000.setup(PIN_SS)
    print("DW1000 initialized")
    print("############### ANCHOR ##############")

    DW1000.generalConfiguration("92:17:5B:D5:A9:9A:E2:9C", C.MODE_LONGDATA_RANGE_ACCURACY)
    DW1000.registerCallback("handleSent", handleSent)
    DW1000.registerCallback("handleReceived", handleReceived)
    DW1000.setAntennaDelay(C.ANTENNA_DELAY_RASPI)

    receiver()
    noteActivity()
    while 1:
   
        tagList = [21,22]
        for currentTag in tagList:
            start_timer = millis() 
            while True:
                if(loop(currentTag, start_timer)):
			break

except KeyboardInterrupt:
    DW1000.close()

















